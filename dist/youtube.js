/******/ (() => { // webpackBootstrap
var __webpack_exports__ = {};
/*!**************************************!*\
  !*** ./src/contentscript/youtube.js ***!
  \**************************************/
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
// Define a maximum number of retries
var maxRetries = 10;

// Function that returns a promise that resolves when the element is found
function waitForElement(selector) {
  var retries = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  return new Promise(function (resolve, reject) {
    var element = document.querySelector(selector);
    if (element) {
      resolve(element);
    } else if (retries < maxRetries) {
      setTimeout(function () {
        return resolve(waitForElement(selector, retries + 1));
      }, 3000);
    } else {
      reject(new Error('Element not found, reached maximum retries: ' + selector));
    }
  });
}

// Click on the transcript button and wait for the transcript element
function clickTranscriptButton() {
  return _clickTranscriptButton.apply(this, arguments);
} // Toggle timestamps off
function _clickTranscriptButton() {
  _clickTranscriptButton = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
    var buttonSelector, button;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          buttonSelector = "button.yt-spec-button-shape-next.yt-spec-button-shape-next--outline.yt-spec-button-shape-next--call-to-action.yt-spec-button-shape-next--size-m[aria-label=\"Show transcript\"]";
          button = document.querySelector(buttonSelector);
          if (button) {
            _context.next = 4;
            break;
          }
          throw new Error('Transcript button not found');
        case 4:
          button.click();
          console.log('Transcript button clicked');
          _context.next = 8;
          return waitForElement('#content ytd-transcript-search-panel-renderer.style-scope.ytd-transcript-renderer');
        case 8:
        case "end":
          return _context.stop();
      }
    }, _callee);
  }));
  return _clickTranscriptButton.apply(this, arguments);
}
function toggleTimestampsOff() {
  return _toggleTimestampsOff.apply(this, arguments);
} // Extract the transcript from the page
function _toggleTimestampsOff() {
  _toggleTimestampsOff = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
    var transcriptPanelSelector, transcriptPanel;
    return _regeneratorRuntime().wrap(function _callee2$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          transcriptPanelSelector = '#content ytd-transcript-search-panel-renderer.style-scope.ytd-transcript-renderer';
          _context2.next = 3;
          return waitForElement(transcriptPanelSelector);
        case 3:
          transcriptPanel = _context2.sent;
          if (!transcriptPanel.hasAttribute('hide-timestamps')) {
            transcriptPanel.setAttribute('hide-timestamps', '');
            console.log('Timestamps toggled off');
          }
        case 5:
        case "end":
          return _context2.stop();
      }
    }, _callee2);
  }));
  return _toggleTimestampsOff.apply(this, arguments);
}
function extractTranscript() {
  var transcriptContainerSelector = '#segments-container';
  var transcriptContainer = document.querySelector(transcriptContainerSelector);
  var transcriptText = transcriptContainer.innerText;
  if (!transcriptContainer) {
    throw new Error('Transcript container not found');
  }
  console.log('Transcript extracted');
  console.log(transcriptText);
  return transcriptText;
}

// Click on the 'View all' chapters button and wait for the chapters element
function clickChaptersButton() {
  return _clickChaptersButton.apply(this, arguments);
} // Extract the chapters from the page
function _clickChaptersButton() {
  _clickChaptersButton = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
    var buttonSelector, button;
    return _regeneratorRuntime().wrap(function _callee3$(_context3) {
      while (1) switch (_context3.prev = _context3.next) {
        case 0:
          buttonSelector = "#navigation-button > ytd-button-renderer > yt-button-shape > button[aria-label=\"View all\"]";
          button = document.querySelector(buttonSelector);
          if (button) {
            _context3.next = 4;
            break;
          }
          throw new Error('Chapters button not found');
        case 4:
          button.click();
          console.log('Chapters button clicked');
          _context3.next = 8;
          return waitForElement('#content > ytd-macro-markers-list-renderer');
        case 8:
        case "end":
          return _context3.stop();
      }
    }, _callee3);
  }));
  return _clickChaptersButton.apply(this, arguments);
}
function extractChapters() {
  var chaptersContainerSelector = '#content > ytd-macro-markers-list-renderer';
  var chaptersContainer = document.querySelector(chaptersContainerSelector);
  if (!chaptersContainer) {
    throw new Error('Chapters container not found');
  }
  console.log('Chapters extracted');
  var chaptersText = chaptersContainer.innerText;
  console.log(chaptersText);

  // Split the chapters text into lines
  var lines = chaptersText.split('\n');

  // Initialize an empty array to hold the chapter objects
  var chaptersArray = [];

  // Assume that titles are at even indices and timestamps at odd indices
  for (var i = 0; i < lines.length; i += 2) {
    var title = lines[i];
    var timestamp = lines[i + 1];
    // Add the chapter object to the array
    chaptersArray.push({
      title: title,
      timestamp: timestamp
    });
  }
  console.log(chaptersArray);
  return chaptersArray;
}

// Format the transcript with chapters
function formatTranscript(transcriptText, chaptersArray) {
  if (!transcriptText) {
    console.error('No transcript text provided');
    return '';
  }

  // Split the transcript into lines for easier processing.
  var transcriptLines = transcriptText.split('\n');
  console.log(transcriptLines);

  // Initialize the formatted transcript as an array of lines.
  var formattedTranscript = '';
  var currentChapterIndex = 0;
  var currentText = '';

  // Iterate over the transcript lines.
  transcriptLines.forEach(function (line) {
    // Check if this line matches the beginning of a chapter.
    if (currentChapterIndex < chaptersArray.length && line.trim() === chaptersArray[currentChapterIndex].title.trim()) {
      // If it's a match and not the first chapter, process the previous chapter.
      if (currentChapterIndex > 0) {
        // Append the previous chapter's title and text to the formatted transcript.
        formattedTranscript += "### ".concat(chaptersArray[currentChapterIndex - 1].title, "\n").concat(currentText.trim(), "\n\n\n");
      }
      // Reset the text for the next chapter and increment the chapter index.
      currentText = '';
      currentChapterIndex++;
    } else {
      // If it's not a chapter title, accumulate the line into the current text.
      currentText += (currentText ? ' ' : '') + line;
    }
  });

  // After the loop, process the last chapter.
  if (currentChapterIndex > 0 && currentText) {
    formattedTranscript += "### ".concat(chaptersArray[currentChapterIndex - 1].title, "\n").concat(currentText.trim(), "\n\n");
  }

  // Trim any excess whitespace from the start/end of the formatted transcript.
  console.log(formattedTranscript.trim());
  formattedText = formattedTranscript.trim();
  console.log(formattedText);

  // Save the formatted transcript to Chrome's local storage
  chrome.storage.local.set({
    'formattedYoutubeTranscript': formattedText
  }, function () {
    console.log('Formatted Youtube transcript saved to local storage.');
  });

  // Send a message to the background script to download the file
  chrome.runtime.sendMessage({
    action: 'downloadTranscript',
    data: formattedText
  });
  return formattedText;
}

// Orchestrator function that uses async/await to run all steps in sequence
function processYouTubeVideo() {
  return _processYouTubeVideo.apply(this, arguments);
} // Start the operation sequence
function _processYouTubeVideo() {
  _processYouTubeVideo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {
    var transcriptText, chaptersArray, _formattedText;
    return _regeneratorRuntime().wrap(function _callee4$(_context4) {
      while (1) switch (_context4.prev = _context4.next) {
        case 0:
          _context4.prev = 0;
          _context4.next = 3;
          return clickTranscriptButton();
        case 3:
          _context4.next = 5;
          return toggleTimestampsOff();
        case 5:
          transcriptText = extractTranscript();
          _context4.next = 8;
          return clickChaptersButton();
        case 8:
          chaptersArray = extractChapters();
          _formattedText = formatTranscript(transcriptText, chaptersArray); // Do something with formattedTranscript
          _context4.next = 15;
          break;
        case 12:
          _context4.prev = 12;
          _context4.t0 = _context4["catch"](0);
          console.error(_context4.t0);
        case 15:
        case "end":
          return _context4.stop();
      }
    }, _callee4, null, [[0, 12]]);
  }));
  return _processYouTubeVideo.apply(this, arguments);
}
processYouTubeVideo();
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,